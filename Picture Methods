/*
   * Method used to create Red, Green and Blue Rows in a picture. A for loop is used
   * in order to recolor each pixel. A conditional if statement is used within the loop
   * to indicate where a certain color must be removed. The top 1/3 of the picture has
   * Green and Blue removed, the middle has Red and Blue removed, and the bottom 1/3 has
   * Red and Green removed.
   * 
   * */
  public void makeRGBRows()
  {
	  int width = getWidth();
	  int height = getHeight();
	  int pixelCount = width * height;
	  int x = 0, y = 0;
	  for(int i = 0; i < pixelCount; i++) {
		  x = i % width;
		  y = i / width;
		  Pixel aDot = getPixel(x,y);
	      
		  if(y < height / 3) {
			  aDot.setGreen(0);
			  aDot.setBlue(0);
		  }else if(y > height * (2.0/3.0)) {
			  aDot.setRed(0);
			  aDot.setGreen(0);
	        
		  }else{
			  aDot.setRed(0);
			  aDot.setBlue(0);
		  }
		  /*
		  if(x == width - 1) {
			  repaint();
		  }*/
	  }
  }
  
  public void makeRGBRegionRows(int leftX, int topY, int regionWidth, int regionHeight) {
	  int picWidth = getWidth();
	  int picHeight = getHeight();
	  /*if(leftX < 0) {
		  regionWidth = leftX + regionWidth;
		  leftX = 0;
	  }
	  if(topY < 0) {
		  regionHeight = topY + regionHeight;
		  topY = 0;
	  }*/
	  if((leftX + regionWidth) > picWidth) {
		  regionWidth = picWidth - leftX;
	  }
	  if((topY + regionHeight) > picHeight) {
		  regionHeight = picHeight - topY;
	  }
	  
	  int x = 0, y = 0;
	  int regionPixelCount = regionWidth * regionHeight;
	  for(int i = 0; i < regionPixelCount; i++) {
		  x = (i % regionWidth) + leftX;
		  y = (i / regionWidth) + topY;
		  Pixel pixel = getPixel(x, y);
		  if(y < (regionHeight / 3) + topY) {
			  pixel.setGreen(0);
			  pixel.setBlue(0);
		  }else if(y > (regionHeight * (2.0/3.0)) + topY) {
			  pixel.setRed(0);
			  pixel.setGreen(0);
	        
		  }else{
			  pixel.setRed(0);
			  pixel.setBlue(0);
		  }
	  }
  }
  
  /*
   * Method used to create Red, Green and Blue Columns in a picture. A for loop is used
   * in order to recolor each pixel. A conditional if statement is used within the loop
   * to indicate where a certain color must be removed. The left 1/3 of the picture has
   * Green and Blue removed, the middle has Red and Blue removed, and the right 1/3 has
   * Red and Green removed.
   * 
   * */
  public void makeRGBColumns()
  {
	  int width = getWidth();
	  int height = getHeight();
	  int pixelCount = width * height;
	  int x = 0, y = 0;
	  for(int i = 0; i < pixelCount; i++) {
		  x = i % width;
		  y = i / width;
		  Pixel aDot = getPixel(x,y);
	      
		  if(x < width / 3) {
			  aDot.setGreen(0);
			  aDot.setBlue(0);
		  }else if(x > width * (2.0/3.0)) {
			  aDot.setRed(0);
			  aDot.setGreen(0);
	        
		  }else{
			  aDot.setRed(0);
			  aDot.setBlue(0);
		  }
		  /*
		  if(x == width - 1) {
			  repaint();
		  }*/
	  }
  }
  
  public void makeRGBRegionColumns(int leftX, int topY, int regionWidth, int regionHeight) {
	  int picWidth = getWidth();
	  int picHeight = getHeight();
	  /*if(leftX < 0) {
		  regionWidth = leftX + regionWidth;
		  leftX = 0;
	  }
	  if(topY < 0) {
		  regionHeight = topY + regionHeight;
		  topY = 0;
	  }*/
	  if((leftX + regionWidth) > picWidth) {
		  regionWidth = picWidth - leftX;
	  }
	  if((topY + regionHeight) > picHeight) {
		  regionHeight = picHeight - topY;
	  }
	  
	  int x = 0, y = 0;
	  int regionPixelCount = regionWidth * regionHeight;
	  for(int i = 0; i < regionPixelCount; i++) {
		  x = (i % regionWidth) + leftX;
		  y = (i / regionWidth) + topY;
		  Pixel pixel = getPixel(x, y);
		  if(x < (regionWidth / 3) + leftX) {
			  pixel.setGreen(0);
			  pixel.setBlue(0);
		  }else if(x > (regionWidth * (2.0/3.0)) + leftX) {
			  pixel.setRed(0);
			  pixel.setGreen(0);
	        
		  }else{
			  pixel.setRed(0);
			  pixel.setBlue(0);
		  }
	  }
  }
  
  public void negate() {
	  int picWidth = getWidth();
	  int picHeight = getHeight();
	  int pixelCount = picWidth * picHeight;
	  int x = 0, y = 0;
	  for(int i = 0; i < pixelCount; i++) {
		  x = i % picWidth;
		  y = i / picWidth;
		  Pixel pixel = getPixel(x, y);
		  pixel.setRed(255 - pixel.getRed());
		  pixel.setGreen(255 - pixel.getGreen());
		  pixel.setBlue(255 - pixel.getBlue());
	  }
  }
  
  public void negateRegion(int leftX, int topY, int regionWidth, int regionHeight) {
	  int picWidth = getWidth();
	  int picHeight = getHeight();
	  /*if(leftX < 0) {
		  regionWidth = leftX + regionWidth;
		  leftX = 0;
	  }
	  if(topY < 0) {
		  regionHeight = topY + regionHeight;
		  topY = 0;
	  }*/
	  if((leftX + regionWidth) > picWidth) {
		  regionWidth = picWidth - leftX;
	  }
	  if((topY + regionHeight) > picHeight) {
		  regionHeight = picHeight - topY;
	  }
	  int regionPixelCount = regionWidth * regionHeight;
	  int i = 0, x = 0, y = 0;
	  while(i < regionPixelCount) {
		  x = (i % regionWidth) + leftX;
		  y = (i / regionWidth) + topY;
		  Pixel dot = getPixel(x, y);
		  dot.setRed(255 - dot.getRed());
		  dot.setGreen(255 - dot.getGreen());
		  dot.setBlue(255 - dot.getBlue());
		  i++;
	  }
  }
  
  public void grayScale() {
	  int picWidth = getWidth();
	  int picHeight = getHeight();
	  int pixelCount = picWidth * picHeight;
	  int x = 0, y = 0;
	  for(int i = 0; i < pixelCount; i++) {
		  x = i % picWidth;
		  y = i / picWidth;
		  Pixel pixel = getPixel(x, y);
		  pixel.setRed((int) ((((pixel.getRed() * 0.299)) + (pixel.getGreen() * 0.587) + (pixel.getBlue() * 0.114))));
		  pixel.setGreen((int) ((((pixel.getRed() * 0.299)) + (pixel.getGreen() * 0.587) + (pixel.getBlue() * 0.114))));
		  pixel.setBlue((int) ((((pixel.getRed() * 0.299)) + (pixel.getGreen() * 0.587) + (pixel.getBlue() * 0.114))));
		  //(int) ((((pixel.getRed() * 0.299)) + (pixel.getGreen() * 0.587) + (pixel.getBlue() * 0.114)) / 3)
	  }
  }
  /**
   * Method used to 
   * 
   * @param leftX
   * @param topY
   * @param regionWidth
   * @param regionHeight
   */
  public void grayScaleRegion(int leftX, int topY, int regionWidth, int regionHeight) {
	  int picWidth = getWidth();
	  int picHeight = getHeight();
	  /*if(leftX < 0) {
		  regionWidth = leftX + regionWidth;
		  leftX = 0;
	  }
	  if(topY < 0) {
		  regionHeight = topY + regionHeight;
		  topY = 0;
	  }*/
	  if((leftX + regionWidth) > picWidth) {
		  regionWidth = picWidth - leftX;
	  }
	  if((topY + regionHeight) > picHeight) {
		  regionHeight = picHeight - topY;
	  }
	  int regionPixelCount = regionWidth * regionHeight;
	  int x = 0, y = 0;
	  for(int i = 0; i < regionPixelCount; i++) {
		  x = (i % regionWidth) + leftX;
		  y = (i / regionWidth) + topY;
		  Pixel pixel = getPixel(x, y);
		  pixel.setRed((int) ((((pixel.getRed() * 0.299)) + (pixel.getGreen() * 0.587) + (pixel.getBlue() * 0.114))));
		  pixel.setGreen((int) ((((pixel.getRed() * 0.299)) + (pixel.getGreen() * 0.587) + (pixel.getBlue() * 0.114))));
		  pixel.setBlue((int) ((((pixel.getRed() * 0.299)) + (pixel.getGreen() * 0.587) + (pixel.getBlue() * 0.114))));
		  //(int) ((((pixel.getRed() * 0.299)) + (pixel.getGreen() * 0.587) + (pixel.getBlue() * 0.114)))
	  }
  }
	  
	  
  
  /**
   * Method to place a specified picture in the parameter onto the picture
   * that invoked the method.
   * 
   * @param x the x coordinate to where the called picture is placed onto the picture that invoked the method
   * @param y the y coordinate to where the called picture is placed onto the picture that invoked the method
   * @param picture the picture that is to be placed onto the picture that invoked the method
   */
  public void stamp(int x, int y, Picture picture) {
	  int pictureWidth = picture.getWidth();
	  int pictureHeight = picture.getHeight();
	  int picturePixelCount = pictureWidth * pictureHeight;
	  int picX = 0, picY = 0, origX = 0, origY = 0;
	  
	  int otherWidth = getWidth();
	  int otherHeight = getHeight();
	  
	  if(pictureWidth + x > otherWidth) {
		  int widthDifference = (x + pictureWidth) - otherWidth;
		  pictureWidth = pictureWidth - widthDifference;
		  picturePixelCount = pictureWidth * pictureHeight;
	  }
	  
	  if(pictureHeight + y > otherHeight) {
		  int heightDifference = (y + pictureHeight) - otherHeight;
		  pictureHeight = pictureHeight - heightDifference;
		  picturePixelCount = pictureWidth * pictureHeight;
	  }
	  
	  for(int i = 0; i < picturePixelCount; i++) {
		  picX = i % pictureWidth;
		  picY = i / pictureWidth;
		  Pixel picturePixel = new Pixel(picture, picX, picY);
			  //Pixel picturePixel = picture.getPixel(picX, picY);
		  Color colorPicturePixel = picturePixel.getColor();
		  
		  origX = (i % pictureWidth) + x;
		  origY = (i / pictureWidth) + y;
		  Pixel originalPixel = new Pixel(this, origX, origY);
			  //Pixel originalPixel = this.getPixel(origX, origY);
		  originalPixel.setColor(colorPicturePixel);		
		  
	  }
  }
